name: Deploy App Python

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      debug_enabled:
        description: 'Habilitar debug'
        required: false
        type: boolean
        default: false
  push:
    branches: [ main ]
  pull_request: {}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt    

      - name: Gerar build (zip da aplicação)
        run: |
          mkdir build
          cp -r app.py requirements.txt templates build/
          cd build
          zip -r ../meuapp.zip .
          cd ..

      - name: Upload artefato
        uses: actions/upload-artifact@v4
        with:
          name: meuapp
          path: meuapp.zip

  test:
    runs-on: ubuntu-latest
    container:
      image: invicti/scan-cli:latest
    env:
      INVICTI_API_BASE_URL: "https://platform.invicti.com"
      INVICTI_API_TOKEN: 2H-LSsQbmnFcKKlDZzm2u5e96ul6XhRYCKdhe7fWIQs
      INVICTI_TARGET_ID: "2ac1910c-b482-4660-81af-a63da1c86d91"
      INVICTI_SCAN_AGENT: "CloudAgent"
      INVICTI_SCAN_PROFILE: "Full Scan"

    steps:
      - name: Run Invicti Scan CLI
        run: /home/invicti/scancli/ScanCLI

      - name: Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: invicti-scan-results
          path: |
            ./scan-results/**
            ./reports/**
            ./*.json
            ./*.html
          if-no-files-found: ignore
          retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build da imagem
        run: docker build -t ${{ secrets.DOCKER_USER }}/meuapp:latest .

      - name: Push da imagem
        run: docker push ${{ secrets.DOCKER_USER }}/meuapp:latest
